# -*- coding: utf-8 -*-
"""iic2_0part2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UH2yvqvxz4h5I_Xe-JocD2St481X8geb
"""

!pip install pdfplumber docx2txt spacy rapidfuzz scikit-learn

!python -m spacy download en_core_web_sm

import re, io, pandas as pd
import pdfplumber, docx2txt
import spacy
from rapidfuzz import fuzz
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from google.colab import files

nlp = spacy.load("en_core_web_sm")

import re, io, pandas as pd
import pdfplumber, docx2txt
import spacy
from rapidfuzz import fuzz
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from google.colab import files

nlp = spacy.load("en_core_web_sm")

from google.colab import files

uploaded = files.upload()
import io
import pandas as pd

for fn in uploaded.keys():
    internship_file = fn
    internships_df = pd.read_csv(io.BytesIO(uploaded[fn]))
    print("Internships loaded:", len(internships_df))

import pandas as pd
import io
from google.colab import files

# Grab the uploaded file
uploaded = files.upload()  # if you havenâ€™t already uploaded in this session, run this

# Load it into a DataFrame
for fn in uploaded.keys():
    internship_file = fn
    internships_df = pd.read_csv(io.BytesIO(uploaded[fn]))
    print("Internships loaded:", len(internships_df))
    print("Columns available:", internships_df.columns.tolist())

from google.colab import files

uploaded = files.upload()  # this opens a file picker

!pip install pdfplumber

import pdfplumber

resume_file = "/content/My_New_Resume (2).pdf"  # replace with your uploaded file

# Extract text from PDF
with pdfplumber.open(resume_file) as pdf:
    resume_text = ""
    for page in pdf.pages:
        resume_text += page.extract_text() + "\n"

print("Resume extracted âœ…")

import re

resume_text = resume_text.lower()                     # lowercase everything
resume_text = re.sub(r'\n', ' ', resume_text)        # remove newlines
resume_text = re.sub(r'[^a-zA-Z0-9 ]', '', resume_text)  # keep letters/numbers only

internships_df.columns = internships_df.columns.str.strip().str.lower()
print("Columns available:", internships_df.columns.tolist())

for col in ['required_degree', 'required_skills', 'internship_name']:
    if col not in internships_df.columns:
        internships_df[col] = ""

internships_df.columns = internships_df.columns.str.strip().str.lower().str.replace(' ', '_')
print(internships_df.columns)  # check exact names

internships_df['internship_name'].head(10)

!pip install rapidfuzz

from rapidfuzz import fuzz

matches = []
for idx, row in internships_df.iterrows():
    internship_name = str(row['title'])  # use 'title', not 'internship_name'
    degree_score = fuzz.partial_ratio(str(row.get('required_degree', '')).lower(), resume_text)
    skill_score = fuzz.partial_ratio(str(row.get('required_skills', '')).lower(), resume_text)

    total_score = (degree_score + skill_score) / 2
    matches.append((internship_name, total_score))

matches.sort(key=lambda x: x[1], reverse=True)

for internship, score in matches[:10]:
    print(f"{internship}: {score:.2f}% match")

from rapidfuzz import fuzz

matches = []
for idx, row in internships_df.iterrows():
    internship_name = str(row['title']) if row['title'] else "Unnamed Internship"
    degree_score = fuzz.partial_ratio(str(row.get('required_degree','')).lower(), resume_text)
    skill_score = fuzz.partial_ratio(str(row.get('required_skills','')).lower(), resume_text)

    total_score = (degree_score + skill_score) / 2
    matches.append((internship_name, total_score))

# Sort by best match
matches.sort(key=lambda x: x[1], reverse=True)

# Show top 10 internships
for internship, score in matches[:10]:
    print(f"{internship}: {score:.2f}% match")

matches = []
for idx, row in internships_df.iterrows():
    internship_name = str(row['title'])
    skill_req = str(row.get('required_skills', '')).lower()

    skill_score = fuzz.partial_ratio(skill_req, resume_text)
    total_score = skill_score  # Only skills matter rn

    if total_score >= 60:
        matches.append({
            'internship_name': internship_name,
            'skill_score': skill_score,
            'total_score': total_score
        })

matches_df = pd.DataFrame(matches).sort_values(by='total_score', ascending=False)
print(f"ðŸ”¥ {len(matches_df)} matches found based on skills only:")
matches_df.head(10)

matches_df.to_csv('matched_internships.csv', index=False)
from google.colab import files
files.download('matched_internships.csv')

print(" CSV ready to download")

print(matches_df.head(10))

with open('parsed_resume.txt', 'w') as file:
    file.write(resume_text)

from google.colab import files
files.download('parsed_resume.txt')

print("Parsed resume text saved")

# Save resume text
with open("parsed_resume.txt", "w") as f:
    f.write(resume_text)

# Save matched internships
matches_df.to_csv("top_matches.csv", index=False)